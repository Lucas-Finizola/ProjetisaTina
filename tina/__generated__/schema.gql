# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  project(relativePath: String): Project!
  projectConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectFilter): ProjectConnection!
  service(relativePath: String): Service!
  serviceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServiceFilter): ServiceConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  post: PostFilter
  page: PageFilter
  project: ProjectFilter
  service: ServiceFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Page | Project | Service | Settings | Folder

type Post implements Node & Document {
  title: String!
  slug: String!
  date: String!
  excerpt: String
  author: String
  category: String
  image: String
  featured: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  slug: StringFilter
  date: DatetimeFilter
  excerpt: StringFilter
  author: StringFilter
  category: StringFilter
  image: ImageFilter
  featured: BooleanFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type PageSeo {
  metaTitle: String
  metaDescription: String
}

type Page implements Node & Document {
  title: String!
  slug: String!
  description: String
  image: String
  seo: PageSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
}

input PageFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  image: ImageFilter
  seo: PageSeoFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type ProjectGallery {
  image: String
  caption: String
}

type ProjectSpecs {
  voltage: String
  panels: String
  inverter: String
  area: String
}

type Project implements Node & Document {
  title: String!
  slug: String!
  description: String
  date: String!
  image: String
  client: String
  location: String
  category: String
  power: Float
  gallery: [ProjectGallery]
  specs: ProjectSpecs
  featured: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ProjectGalleryFilter {
  image: ImageFilter
  caption: StringFilter
}

input ProjectSpecsFilter {
  voltage: StringFilter
  panels: StringFilter
  inverter: StringFilter
  area: StringFilter
}

input ProjectFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  date: DatetimeFilter
  image: ImageFilter
  client: StringFilter
  location: StringFilter
  category: StringFilter
  power: NumberFilter
  gallery: ProjectGalleryFilter
  specs: ProjectSpecsFilter
  featured: BooleanFilter
  body: RichTextFilter
}

type ProjectConnectionEdges {
  cursor: String!
  node: Project
}

type ProjectConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectConnectionEdges]
}

type ServiceFeatures {
  feature: String
}

type ServiceProcess {
  step: String
  description: String
}

type Service implements Node & Document {
  title: String!
  slug: String!
  description: String
  category: String
  icon: String
  image: String
  price: Float
  duration: String
  features: [ServiceFeatures]
  process: [ServiceProcess]
  featured: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServiceFeaturesFilter {
  feature: StringFilter
}

input ServiceProcessFilter {
  step: StringFilter
  description: StringFilter
}

input ServiceFilter {
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  category: StringFilter
  icon: ImageFilter
  image: ImageFilter
  price: NumberFilter
  duration: StringFilter
  features: ServiceFeaturesFilter
  process: ServiceProcessFilter
  featured: BooleanFilter
  body: RichTextFilter
}

type ServiceConnectionEdges {
  cursor: String!
  node: Service
}

type ServiceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServiceConnectionEdges]
}

type SettingsContact {
  email: String
  phone: String
  whatsapp: String
  address: String
  city: String
  state: String
  zipCode: String
}

type SettingsSocial {
  facebook: String
  instagram: String
  linkedin: String
  youtube: String
}

type SettingsBusiness {
  cnpj: String
  crea: String
  workingHours: String
}

type SettingsSeo {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

type Settings implements Node & Document {
  title: String!
  description: String
  logo: String
  contact: SettingsContact
  social: SettingsSocial
  business: SettingsBusiness
  seo: SettingsSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsContactFilter {
  email: StringFilter
  phone: StringFilter
  whatsapp: StringFilter
  address: StringFilter
  city: StringFilter
  state: StringFilter
  zipCode: StringFilter
}

input SettingsSocialFilter {
  facebook: StringFilter
  instagram: StringFilter
  linkedin: StringFilter
  youtube: StringFilter
}

input SettingsBusinessFilter {
  cnpj: StringFilter
  crea: StringFilter
  workingHours: StringFilter
}

input SettingsSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  ogImage: ImageFilter
}

input SettingsFilter {
  title: StringFilter
  description: StringFilter
  logo: ImageFilter
  contact: SettingsContactFilter
  social: SettingsSocialFilter
  business: SettingsBusinessFilter
  seo: SettingsSeoFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateProject(relativePath: String!, params: ProjectMutation!): Project!
  createProject(relativePath: String!, params: ProjectMutation!): Project!
  updateService(relativePath: String!, params: ServiceMutation!): Service!
  createService(relativePath: String!, params: ServiceMutation!): Service!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  post: PostMutation
  page: PageMutation
  project: ProjectMutation
  service: ServiceMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  page: PageMutation
  project: ProjectMutation
  service: ServiceMutation
  settings: SettingsMutation
}

input PostMutation {
  title: String
  slug: String
  date: String
  excerpt: String
  author: String
  category: String
  image: String
  featured: Boolean
  body: JSON
}

input PageSeoMutation {
  metaTitle: String
  metaDescription: String
}

input PageMutation {
  title: String
  slug: String
  description: String
  image: String
  seo: PageSeoMutation
  body: JSON
}

input ProjectGalleryMutation {
  image: String
  caption: String
}

input ProjectSpecsMutation {
  voltage: String
  panels: String
  inverter: String
  area: String
}

input ProjectMutation {
  title: String
  slug: String
  description: String
  date: String
  image: String
  client: String
  location: String
  category: String
  power: Float
  gallery: [ProjectGalleryMutation]
  specs: ProjectSpecsMutation
  featured: Boolean
  body: JSON
}

input ServiceFeaturesMutation {
  feature: String
}

input ServiceProcessMutation {
  step: String
  description: String
}

input ServiceMutation {
  title: String
  slug: String
  description: String
  category: String
  icon: String
  image: String
  price: Float
  duration: String
  features: [ServiceFeaturesMutation]
  process: [ServiceProcessMutation]
  featured: Boolean
  body: JSON
}

input SettingsContactMutation {
  email: String
  phone: String
  whatsapp: String
  address: String
  city: String
  state: String
  zipCode: String
}

input SettingsSocialMutation {
  facebook: String
  instagram: String
  linkedin: String
  youtube: String
}

input SettingsBusinessMutation {
  cnpj: String
  crea: String
  workingHours: String
}

input SettingsSeoMutation {
  metaTitle: String
  metaDescription: String
  ogImage: String
}

input SettingsMutation {
  title: String
  description: String
  logo: String
  contact: SettingsContactMutation
  social: SettingsSocialMutation
  business: SettingsBusinessMutation
  seo: SettingsSeoMutation
}

schema {
  query: Query
  mutation: Mutation
}
